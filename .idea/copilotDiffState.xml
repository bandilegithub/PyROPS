<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/config.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Configuration and constants for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;# Application Information&#10;APP_VERSION = &quot;2.3.12&quot;&#10;APP_TITLE = &quot;ASRI Propulsion and Automation Simulation Software&quot;&#10;WINDOW_TITLE = &quot;PyROPS v2.3.12&quot;&#10;&#10;# Default Window Configuration&#10;DEFAULT_GEOMETRY = {&#10;    'main': '486x464+540+200',&#10;    'launcher': '1590x870',&#10;    'position_x': 540,&#10;    'position_y': 200&#10;}&#10;&#10;# Default Simulation Parameters&#10;DEFAULT_PARAMS = {&#10;    'max_simulation_time': 1200.0,&#10;    'time_step_size': 0.02,&#10;    'launch_latitude': -34.600,&#10;    'launch_longitude': 20.300,&#10;    'launch_altitude': 0.000,&#10;    'launch_elevation': 80.000,&#10;    'launch_azimuth': -100.000,&#10;    'rocket_body_radius': 0.087,&#10;    'rocket_body_length': 4.920,&#10;    'launch_rail_length': 7.0,&#10;    'nozzle_exit_area': 0.007056,&#10;    'thrust_polynomial_degree': 6,&#10;    'missile_datcom_cards': 20,&#10;    'cad_mass_dry': 49.35224149,&#10;    'cad_com_x': 1.386632,&#10;    'cad_com_y': 0.0,&#10;    'cad_com_z': 0.0,&#10;    'cad_moi_x': 0.04023116,&#10;    'cad_moi_y': 180.8297,&#10;    'cad_moi_z': 180.8297,&#10;    'time_burn': 17.1,&#10;    'fuel_density': 1065.0,&#10;    'fuel_radius': 0.0735,&#10;    'parachute_cd': 1.3,&#10;    'parachute_diameter': 1.0,&#10;    'parachute_delay': 10.0&#10;}&#10;&#10;# File Paths&#10;PATHS = {&#10;    'settings_file': r'Inputs\Settings.xlsx',&#10;    'path_file': 'Path.txt',&#10;    'variables_file': 'Variables.txt'&#10;}&#10;&#10;# URLs&#10;URLS = {&#10;    'website': 'https://aerospace.ukzn.ac.za/',&#10;    'support': '&lt;insert GitHub URL here&gt;'&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/config/appsettings.json">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/config/appsettings.json" />
              <option name="updatedContent" value="{&#10;  &quot;simulation&quot;: {&#10;    &quot;time_max&quot;: 1200.0,&#10;    &quot;time_step&quot;: 0.02,&#10;    &quot;launch_lat&quot;: -34.600,&#10;    &quot;launch_lon&quot;: 20.300,&#10;    &quot;launch_alt&quot;: 0.0,&#10;    &quot;launch_elev&quot;: 80.0,&#10;    &quot;launch_azim&quot;: -100.0,&#10;    &quot;solver_8th&quot;: 1,&#10;    &quot;rel_tolerance&quot;: 1.0,&#10;    &quot;abs_tolerance&quot;: 1.0,&#10;    &quot;first_step&quot;: 0.02,&#10;    &quot;max_step&quot;: 0.02&#10;  },&#10;  &quot;rocket&quot;: {&#10;    &quot;body_radius&quot;: 0.087,&#10;    &quot;body_length&quot;: 4.920,&#10;    &quot;rail_length&quot;: 7.0,&#10;    &quot;nozzle_area&quot;: 0.007056,&#10;    &quot;cad_mass&quot;: 49.35224149,&#10;    &quot;cad_com_x&quot;: 1.386632,&#10;    &quot;cad_com_y&quot;: 0.0,&#10;    &quot;cad_com_z&quot;: 0.0,&#10;    &quot;cad_moi_x&quot;: 0.04023116,&#10;    &quot;cad_moi_y&quot;: 180.8297,&#10;    &quot;cad_moi_z&quot;: 180.8297&#10;  },&#10;  &quot;monte_carlo&quot;: {&#10;    &quot;mc_runs&quot;: 1000,&#10;    &quot;mc_enable&quot;: 1,&#10;    &quot;mc_detailed&quot;: 1&#10;  },&#10;  &quot;application&quot;: {&#10;    &quot;version&quot;: &quot;2.4.0&quot;,&#10;    &quot;title&quot;: &quot;PyROPS - ASRI Propulsion and Automation Simulation Software&quot;,&#10;    &quot;organization&quot;: &quot;ASRI - University of KwaZulu-Natal&quot;,&#10;    &quot;website&quot;: &quot;https://aerospace.ukzn.ac.za/&quot;,&#10;    &quot;contact&quot;: &quot;aerospace@ukzn.ac.za&quot;&#10;  },&#10;  &quot;paths&quot;: {&#10;    &quot;input_dir&quot;: &quot;Inputs&quot;,&#10;    &quot;output_dir&quot;: &quot;Outputs&quot;,&#10;    &quot;temp_dir&quot;: &quot;Temp&quot;&#10;  },&#10;  &quot;graphics&quot;: {&#10;    &quot;enable_3d&quot;: true,&#10;    &quot;plot_width&quot;: 800,&#10;    &quot;plot_height&quot;: 600,&#10;    &quot;dpi&quot;: 100&#10;  }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/config/config.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/config/config.py" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Configuration and constants for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;from pathlib import Path&#10;&#10;CONFIG = {&#10;    &quot;app&quot;: {&#10;        &quot;version&quot;: &quot;2.3.12&quot;,&#10;        &quot;title&quot;: &quot;ASRI Propulsion and Automation Simulation Software&quot;,&#10;        &quot;window_title&quot;: &quot;PyROPS v2.3.12&quot;&#10;    },&#10;    &quot;window&quot;: {&#10;        &quot;geometry&quot;: {&#10;            &quot;main&quot;: &quot;486x464+540+200&quot;,&#10;            &quot;launcher&quot;: &quot;1590x870&quot;,&#10;            &quot;position_x&quot;: 540,&#10;            &quot;position_y&quot;: 200&#10;        }&#10;    },&#10;    &quot;simulation&quot;: {&#10;        &quot;max_simulation_time&quot;: 1200.0,&#10;        &quot;time_step_size&quot;: 0.02,&#10;        &quot;launch_latitude&quot;: -34.600,&#10;        &quot;launch_longitude&quot;: 20.300,&#10;        &quot;launch_altitude&quot;: 0.000,&#10;        &quot;launch_elevation&quot;: 80.000,&#10;        &quot;launch_azimuth&quot;: -100.000,&#10;        &quot;rocket_body_radius&quot;: 0.087,&#10;        &quot;rocket_body_length&quot;: 4.920,&#10;        &quot;launch_rail_length&quot;: 7.0,&#10;        &quot;nozzle_exit_area&quot;: 0.007056,&#10;        &quot;thrust_polynomial_degree&quot;: 6,&#10;        &quot;missile_datcom_cards&quot;: 20,&#10;        &quot;cad_mass_dry&quot;: 49.35224149,&#10;        &quot;cad_com_x&quot;: 1.386632,&#10;        &quot;cad_com_y&quot;: 0.0,&#10;        &quot;cad_com_z&quot;: 0.0,&#10;        &quot;cad_moi_x&quot;: 0.04023116,&#10;        &quot;cad_moi_y&quot;: 180.8297,&#10;        &quot;cad_moi_z&quot;: 180.8297,&#10;        &quot;time_burn&quot;: 17.1,&#10;        &quot;fuel_density&quot;: 1065.0,&#10;        &quot;fuel_radius&quot;: 0.0735,&#10;        &quot;parachute_cd&quot;: 1.3,&#10;        &quot;parachute_diameter&quot;: 1.0,&#10;        &quot;parachute_delay&quot;: 10.0&#10;    },&#10;    &quot;paths&quot;: {&#10;        &quot;settings_file&quot;: str(Path(&quot;Inputs/Settings.xlsx&quot;)),&#10;        &quot;path_file&quot;: &quot;Path.txt&quot;,&#10;        &quot;variables_file&quot;: &quot;Variables.txt&quot;,&#10;        &quot;hyrops_key&quot;: &quot;HYROPS Key.xlsx&quot;,&#10;        &quot;asri_image&quot;: &quot;ASRI.jpg&quot;&#10;    },&#10;    &quot;ui&quot;: {&#10;        &quot;colors&quot;: {&#10;            &quot;background&quot;: &quot;lightgray&quot;,&#10;            &quot;foreground&quot;: &quot;black&quot;,&#10;            &quot;button_bg&quot;: &quot;lightgray&quot;,&#10;            &quot;button_fg&quot;: &quot;black&quot;,&#10;            &quot;entry_bg&quot;: &quot;white&quot;,&#10;            &quot;text_bg&quot;: &quot;white&quot;&#10;        }&#10;    },&#10;    &quot;physics&quot;: {&#10;        &quot;gravity&quot;: 9.81,&#10;        &quot;air_density_sea_level&quot;: 1.225,&#10;        &quot;gas_constant&quot;: 287.0,&#10;        &quot;standard_pressure&quot;: 101325.0,&#10;        &quot;standard_temperature&quot;: 288.15&#10;    }&#10;}&#10;&#10;# Optional: load overrides from environment variables or external file&#10;# Example: CONFIG[&quot;simulation&quot;][&quot;max_simulation_time&quot;] = float(os.getenv(&quot;MAX_SIM_TIME&quot;, CONFIG[&quot;simulation&quot;][&quot;max_simulation_time&quot;]))" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/config/settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/config/settings.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Configuration and constants for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;# Application Information&#10;APP_VERSION = &quot;2.3.12&quot;&#10;APP_TITLE = &quot;ASRI Propulsion and Automation Simulation Software&quot;&#10;WINDOW_TITLE = &quot;PyROPS v2.3.12&quot;&#10;&#10;# Default Window Configuration&#10;DEFAULT_GEOMETRY = {&#10;    'main': '486x464+540+200',&#10;    'launcher': '1590x870',&#10;    'position_x': 540,&#10;    'position_y': 200&#10;}&#10;&#10;# Default Simulation Parameters&#10;DEFAULT_PARAMS = {&#10;    'max_simulation_time': 1200.0,&#10;    'time_step_size': 0.02,&#10;    'launch_latitude': -34.600,&#10;    'launch_longitude': 20.300,&#10;    'launch_altitude': 0.000,&#10;    'launch_elevation': 80.000,&#10;    'launch_azimuth': -100.000,&#10;    'rocket_body_radius': 0.087,&#10;    'rocket_body_length': 4.920,&#10;    'launch_rail_length': 7.0,&#10;    'nozzle_exit_area': 0.007056,&#10;    'thrust_polynomial_degree': 6,&#10;    'missile_datcom_cards': 20,&#10;    'cad_mass_dry': 49.35224149,&#10;    'cad_com_x': 1.386632,&#10;    'cad_com_y': 0.0,&#10;    'cad_com_z': 0.0,&#10;    'cad_moi_x': 0.04023116,&#10;    'cad_moi_y': 180.8297,&#10;    'cad_moi_z': 180.8297,&#10;    'time_burn': 17.1,&#10;    'fuel_density': 1065.0,&#10;    'fuel_radius': 0.0735,&#10;    'parachute_cd': 1.3,&#10;    'parachute_diameter': 1.0,&#10;    'parachute_delay': 10.0&#10;}&#10;&#10;# File Paths&#10;PATHS = {&#10;    'settings_file': r'Inputs\Settings.xlsx',&#10;    'path_file': 'Path.txt',&#10;    'variables_file': 'Variables.txt',&#10;    'hyrops_key': 'HYROPS Key.xlsx',&#10;    'asri_image': 'ASRI.jpg'&#10;}&#10;&#10;# UI Colors and Styling&#10;UI_COLORS = {&#10;    'background': 'lightgray',&#10;    'foreground': 'black',&#10;    'button_bg': 'lightgray',&#10;    'button_fg': 'black',&#10;    'entry_bg': 'white',&#10;    'text_bg': 'white'&#10;}&#10;&#10;# Simulation Constants&#10;PHYSICS_CONSTANTS = {&#10;    'gravity': 9.81,&#10;    'air_density_sea_level': 1.225,&#10;    'gas_constant': 287.0,&#10;    'standard_pressure': 101325.0,&#10;    'standard_temperature': 288.15&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/gui/load_settings.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/gui/load_settings.py" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/models.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Data models for the ASRI Simulator application.&#10;&quot;&quot;&quot;&#10;&#10;from dataclasses import dataclass&#10;from typing import Dict, Any, Optional&#10;import pandas as pd&#10;from pathlib import Path&#10;&#10;&#10;@dataclass&#10;class SimulationParameters:&#10;    &quot;&quot;&quot;Data class for simulation parameters.&quot;&quot;&quot;&#10;    &#10;    # Time and location parameters&#10;    max_simulation_time: float = 1200.0&#10;    time_step_size: float = 0.02&#10;    launch_latitude: float = -34.600&#10;    launch_longitude: float = 20.300&#10;    launch_altitude: float = 0.000&#10;    launch_elevation: float = 80.000&#10;    launch_azimuth: float = -100.000&#10;    &#10;    # Rocket geometry&#10;    rocket_body_radius: float = 0.087&#10;    rocket_body_length: float = 4.920&#10;    launch_rail_length: float = 7.0&#10;    nozzle_exit_area: float = 0.007056&#10;    &#10;    # Analysis parameters&#10;    thrust_polynomial_degree: int = 6&#10;    missile_datcom_cards: int = 20&#10;    &#10;    # Mass properties (dry)&#10;    cad_mass_dry: float = 49.35224149&#10;    cad_com_x: float = 1.386632&#10;    cad_com_y: float = 0.0&#10;    cad_com_z: float = 0.0&#10;    cad_moi_x: float = 0.04023116&#10;    cad_moi_y: float = 180.8297&#10;    cad_moi_z: float = 180.8297&#10;    &#10;    # Propulsion&#10;    time_burn: float = 17.1&#10;    fuel_density: float = 1065.0&#10;    fuel_radius: float = 0.0735&#10;    &#10;    # Recovery&#10;    parachute_cd: float = 1.3&#10;    parachute_diameter: float = 1.0&#10;    parachute_delay: float = 10.0&#10;    &#10;    # Directory&#10;    directory: str = &quot;&quot;&#10;&#10;&#10;@dataclass&#10;class MonteCarloParameters:&#10;    &quot;&quot;&quot;Data class for Monte Carlo simulation parameters.&quot;&quot;&quot;&#10;    &#10;    number_runs: int = 100&#10;    launch_elevation_lower: float = 75.0&#10;    launch_elevation_upper: float = 85.0&#10;    launch_azimuth_lower: float = -105.0&#10;    launch_azimuth_upper: float = -95.0&#10;    thrust_misalignment_yaw_lower: float = -2.0&#10;    thrust_misalignment_yaw_upper: float = 2.0&#10;    thrust_misalignment_pitch_lower: float = -2.0&#10;    thrust_misalignment_pitch_upper: float = 2.0&#10;    thrust_magnitude_lower: float = 0.9&#10;    thrust_magnitude_upper: float = 1.1&#10;    wind_magnitude_lower: float = 0.0&#10;    wind_magnitude_upper: float = 10.0&#10;    wind_direction_lower: float = 0.0&#10;    wind_direction_upper: float = 360.0&#10;&#10;&#10;class ParameterManager:&#10;    &quot;&quot;&quot;Manages loading and saving of simulation parameters.&quot;&quot;&quot;&#10;    &#10;    def __init__(self, settings_file_path: str = &quot;&quot;):&#10;        self.settings_file_path = settings_file_path&#10;        &#10;    def load_from_excel(self, file_path: str) -&gt; SimulationParameters:&#10;        &quot;&quot;&quot;Load parameters from Excel file.&quot;&quot;&quot;&#10;        try:&#10;            df = pd.read_excel(file_path, header=0)&#10;            params = SimulationParameters()&#10;            &#10;            # Map Excel columns to parameter attributes&#10;            column_mapping = {&#10;                &quot;Maximum Simulation Time&quot;: &quot;max_simulation_time&quot;,&#10;                &quot;Time Step Size&quot;: &quot;time_step_size&quot;,&#10;                &quot;Launch Latitude&quot;: &quot;launch_latitude&quot;,&#10;                &quot;Launch Longitude&quot;: &quot;launch_longitude&quot;,&#10;                &quot;Launch Altitude&quot;: &quot;launch_altitude&quot;,&#10;                &quot;Launch Elevation&quot;: &quot;launch_elevation&quot;,&#10;                &quot;Launch Azimuth&quot;: &quot;launch_azimuth&quot;,&#10;                &quot;Rocket Body Radius&quot;: &quot;rocket_body_radius&quot;,&#10;                &quot;Rocket Body Length&quot;: &quot;rocket_body_length&quot;,&#10;                &quot;Launch Rail Length&quot;: &quot;launch_rail_length&quot;,&#10;                &quot;Nozzle Exit Area&quot;: &quot;nozzle_exit_area&quot;,&#10;                &quot;Thrust Polynomial Degree&quot;: &quot;thrust_polynomial_degree&quot;,&#10;                &quot;MissileDATCOM Cards&quot;: &quot;missile_datcom_cards&quot;,&#10;                &quot;SolidWorks Mass&quot;: &quot;cad_mass_dry&quot;,&#10;                &quot;SolidWorks COMx&quot;: &quot;cad_com_x&quot;,&#10;                &quot;SolidWorks COMy&quot;: &quot;cad_com_y&quot;,&#10;                &quot;SolidWorks COMz&quot;: &quot;cad_com_z&quot;,&#10;                &quot;SolidWorks MOIx&quot;: &quot;cad_moi_x&quot;,&#10;                &quot;SolidWorks MOIy&quot;: &quot;cad_moi_y&quot;,&#10;                &quot;SolidWorks MOIz&quot;: &quot;cad_moi_z&quot;,&#10;                &quot;Time Burn&quot;: &quot;time_burn&quot;,&#10;                &quot;Density Fuel&quot;: &quot;fuel_density&quot;,&#10;                &quot;Radius Fuel&quot;: &quot;fuel_radius&quot;,&#10;                &quot;CD Parachute&quot;: &quot;parachute_cd&quot;,&#10;                &quot;Diameter Parachute&quot;: &quot;parachute_diameter&quot;,&#10;                &quot;Parachute Deployment Delay&quot;: &quot;parachute_delay&quot;&#10;            }&#10;            &#10;            for excel_col, param_attr in column_mapping.items():&#10;                if excel_col in df.columns and len(df) &gt; 0:&#10;                    value = df.at[0, excel_col]&#10;                    if pd.notna(value):&#10;                        setattr(params, param_attr, float(value))&#10;            &#10;            return params&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error loading parameters from Excel: {e}&quot;)&#10;            return SimulationParameters()&#10;    &#10;    def save_to_excel(self, params: SimulationParameters, file_path: str) -&gt; bool:&#10;        &quot;&quot;&quot;Save parameters to Excel file.&quot;&quot;&quot;&#10;        try:&#10;            # Create DataFrame with parameter data&#10;            data = {&#10;                &quot;Maximum Simulation Time&quot;: [params.max_simulation_time],&#10;                &quot;Time Step Size&quot;: [params.time_step_size],&#10;                &quot;Launch Latitude&quot;: [params.launch_latitude],&#10;                &quot;Launch Longitude&quot;: [params.launch_longitude],&#10;                &quot;Launch Altitude&quot;: [params.launch_altitude],&#10;                &quot;Launch Elevation&quot;: [params.launch_elevation],&#10;                &quot;Launch Azimuth&quot;: [params.launch_azimuth],&#10;                &quot;Rocket Body Radius&quot;: [params.rocket_body_radius],&#10;                &quot;Rocket Body Length&quot;: [params.rocket_body_length],&#10;                &quot;Launch Rail Length&quot;: [params.launch_rail_length],&#10;                &quot;Nozzle Exit Area&quot;: [params.nozzle_exit_area],&#10;                &quot;Thrust Polynomial Degree&quot;: [params.thrust_polynomial_degree],&#10;                &quot;MissileDATCOM Cards&quot;: [params.missile_datcom_cards],&#10;                &quot;SolidWorks Mass&quot;: [params.cad_mass_dry],&#10;                &quot;SolidWorks COMx&quot;: [params.cad_com_x],&#10;                &quot;SolidWorks COMy&quot;: [params.cad_com_y],&#10;                &quot;SolidWorks COMz&quot;: [params.cad_com_z],&#10;                &quot;SolidWorks MOIx&quot;: [params.cad_moi_x],&#10;                &quot;SolidWorks MOIy&quot;: [params.cad_moi_y],&#10;                &quot;SolidWorks MOIz&quot;: [params.cad_moi_z],&#10;                &quot;Time Burn&quot;: [params.time_burn],&#10;                &quot;Density Fuel&quot;: [params.fuel_density],&#10;                &quot;Radius Fuel&quot;: [params.fuel_radius],&#10;                &quot;CD Parachute&quot;: [params.parachute_cd],&#10;                &quot;Diameter Parachute&quot;: [params.parachute_diameter],&#10;                &quot;Parachute Deployment Delay&quot;: [params.parachute_delay]&#10;            }&#10;            &#10;            df = pd.DataFrame(data)&#10;            df.to_excel(file_path, index=False)&#10;            return True&#10;            &#10;        except Exception as e:&#10;            print(f&quot;Error saving parameters to Excel: {e}&quot;)&#10;            return False" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/models/models.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/models/models.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Data models for the ASRI Simulator application.&#10;&quot;&quot;&quot;&#10;&#10;from dataclasses import dataclass&#10;from typing import Dict, Any, Optional&#10;import pandas as pd&#10;&#10;@dataclass&#10;class SimulationParameters:&#10;    &quot;&quot;&quot;Data class for simulation parameters.&quot;&quot;&quot;&#10;&#10;    # Time and location parameters&#10;    max_simulation_time: float = 1200.0&#10;    time_step_size: float = 0.02&#10;    launch_latitude: float = -34.600&#10;    launch_longitude: float = 20.300&#10;    launch_altitude: float = 0.000&#10;    launch_elevation: float = 80.000&#10;    launch_azimuth: float = -100.000&#10;&#10;    # Rocket geometry&#10;    rocket_body_radius: float = 0.087&#10;    rocket_body_length: float = 4.920&#10;    launch_rail_length: float = 7.0&#10;    nozzle_exit_area: float = 0.007056&#10;&#10;    # Analysis parameters&#10;    thrust_polynomial_degree: int = 6&#10;    missile_datcom_cards: int = 20&#10;&#10;    # Mass properties (dry)&#10;    cad_mass_dry: float = 49.35224149&#10;    cad_com_x: float = 1.386632&#10;    cad_com_y: float = 0.0&#10;    cad_com_z: float = 0.0&#10;    cad_moi_x: float = 0.04023116&#10;    cad_moi_y: float = 180.8297&#10;    cad_moi_z: float = 180.8297&#10;&#10;    # Propulsion&#10;    time_burn: float = 17.1&#10;    fuel_density: float = 1065.0&#10;    fuel_radius: float = 0.0735&#10;&#10;    # Recovery&#10;    parachute_cd: float = 1.3&#10;    parachute_diameter: float = 1.0&#10;    parachute_delay: float = 10.0&#10;&#10;    # Directory&#10;    directory: str = &quot;&quot;&#10;&#10;&#10;@dataclass&#10;class MonteCarloParameters:&#10;    &quot;&quot;&quot;Data class for Monte Carlo simulation parameters.&quot;&quot;&quot;&#10;&#10;class MonteCarloParameters:&#10;    &quot;&quot;&quot;Data class for Monte Carlo simulation parameters.&quot;&quot;&quot;&#10;&#10;    number_runs: int = 100&#10;    launch_elevation_lower: float = 75.0&#10;    launch_elevation_upper: float = 85.0&#10;    launch_azimuth_lower: float = -105.0&#10;    launch_azimuth_upper: float = -95.0&#10;    thrust_misalignment_yaw_lower: float = -2.0&#10;    thrust_misalignment_yaw_upper: float = 2.0&#10;    thrust_misalignment_pitch_lower: float = -2.0&#10;    thrust_misalignment_pitch_upper: float = 2.0&#10;    thrust_magnitude_lower: float = 0.9&#10;    thrust_magnitude_upper: float = 1.1&#10;    wind_magnitude_lower: float = 0.0&#10;    wind_magnitude_upper: float = 10.0&#10;    wind_direction_lower: float = 0.0&#10;    wind_direction_upper: float = 360.0&#10;&#10;&#10;class ParameterManager:&#10;    &quot;&quot;&quot;Manages loading and saving of simulation parameters.&quot;&quot;&quot;&#10;&#10;    def __init__(self, settings_file_path: str = &quot;&quot;):&#10;        self.settings_file_path = settings_file_path&#10;        &quot;&quot;&quot;Load parameters from Excel file.&quot;&quot;&quot;&#10;        try:&#10;    def load_from_excel(self, file_path: str) -&gt; SimulationParameters:&#10;        &quot;&quot;&quot;Load parameters from Excel file.&quot;&quot;&quot;&#10;            df = pd.read_excel(file_path, header=0)&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Data models for the ASRI Simulator application.&#10;&quot;&quot;&quot;&#10;&#10;from dataclasses import dataclass, field&#10;from typing import Dict, List, Any, Optional, Tuple&#10;import pandas as pd&#10;import numpy as np&#10;from pathlib import Path&#10;from datetime import datetime&#10;&#10;&#10;@dataclass&#10;class SimulationParameters:&#10;    &quot;&quot;&quot;Data class for simulation parameters.&quot;&quot;&quot;&#10;&#10;    # Time and location parameters&#10;    max_simulation_time: float = 1200.0&#10;    time_step_size: float = 0.02&#10;    launch_latitude: float = -34.600&#10;    launch_longitude: float = 20.300&#10;    launch_altitude: float = 0.000&#10;    launch_elevation: float = 80.000&#10;    launch_azimuth: float = -100.000&#10;&#10;    # Rocket geometry&#10;    rocket_body_radius: float = 0.087&#10;    rocket_body_length: float = 4.920&#10;    launch_rail_length: float = 7.0&#10;    nozzle_exit_area: float = 0.007056&#10;&#10;    # Analysis parameters&#10;    thrust_polynomial_degree: int = 6&#10;    missile_datcom_cards: int = 20&#10;&#10;    # Mass properties (dry)&#10;    cad_mass_dry: float = 49.35224149&#10;    cad_com_x: float = 1.386632&#10;    cad_com_y: float = 0.0&#10;    cad_com_z: float = 0.0&#10;    cad_moi_x: float = 0.04023116&#10;    cad_moi_y: float = 180.8297&#10;    cad_moi_z: float = 180.8297&#10;&#10;    # Propulsion&#10;    time_burn: float = 17.1&#10;    fuel_density: float = 1065.0&#10;    fuel_radius: float = 0.0735&#10;&#10;    # Recovery&#10;    parachute_cd: float = 1.3&#10;    parachute_diameter: float = 1.0&#10;    parachute_delay: float = 10.0&#10;&#10;    # Directory&#10;    directory: str = &quot;&quot;&#10;&#10;&#10;@dataclass&#10;class RocketConfiguration:&#10;    &quot;&quot;&quot;Configuration data for the rocket.&quot;&quot;&quot;&#10;    &#10;    name: str = &quot;Default Rocket&quot;&#10;    description: str = &quot;&quot;&#10;    &#10;    # Geometry&#10;    nose_cone_length: float = 0.5&#10;    nose_cone_type: str = &quot;ogive&quot;&#10;    body_tube_length: float = 3.0&#10;    body_tube_diameter: float = 0.174&#10;    fin_count: int = 4&#10;    fin_chord: float = 0.2&#10;    fin_span: float = 0.15&#10;    fin_sweep: float = 30.0&#10;    &#10;    # Mass properties&#10;    dry_mass: float = 45.0&#10;    propellant_mass: float = 15.0&#10;    recovery_mass: float = 2.0&#10;    &#10;    # Center of mass and moments of inertia&#10;    center_of_mass: Tuple[float, float, float] = (1.5, 0.0, 0.0)&#10;    moments_of_inertia: Tuple[float, float, float] = (0.05, 150.0, 150.0)&#10;&#10;&#10;@dataclass&#10;class Engine:&#10;    &quot;&quot;&quot;Engine/motor configuration and performance data.&quot;&quot;&quot;&#10;    &#10;    name: str = &quot;Default Engine&quot;&#10;    manufacturer: str = &quot;&quot;&#10;    designation: str = &quot;&quot;&#10;    &#10;    # Physical properties&#10;    diameter: float = 0.075&#10;    length: float = 0.5&#10;    mass: float = 2.0&#10;    &#10;    # Performance&#10;    total_impulse: float = 5000.0&#10;    burn_time: float = 15.0&#10;    average_thrust: float = 333.0&#10;    peak_thrust: float = 500.0&#10;    &#10;    # Thrust curve data&#10;    thrust_curve_time: List[float] = field(default_factory=list)&#10;    thrust_curve_force: List[float] = field(default_factory=list)&#10;    &#10;    # Propellant properties&#10;    propellant_type: str = &quot;solid&quot;&#10;    specific_impulse: float = 200.0&#10;&#10;&#10;@dataclass&#10;class Propellant:&#10;    &quot;&quot;&quot;Propellant properties and consumption data.&quot;&quot;&quot;&#10;    &#10;    name: str = &quot;Default Propellant&quot;&#10;    type: str = &quot;solid&quot;  # solid, liquid, hybrid&#10;    &#10;    # Physical properties&#10;    density: float = 1800.0  # kg/m³&#10;    specific_impulse: float = 200.0  # seconds&#10;    &#10;    # Combustion properties&#10;    combustion_temperature: float = 3000.0  # K&#10;    molecular_weight: float = 25.0  # g/mol&#10;    gamma: float = 1.2  # specific heat ratio&#10;    &#10;    # Mass flow and consumption&#10;    initial_mass: float = 15.0  # kg&#10;    burn_rate: float = 0.01  # m/s&#10;    pressure_exponent: float = 0.5&#10;&#10;&#10;@dataclass&#10;class Aerodynamics:&#10;    &quot;&quot;&quot;Aerodynamic coefficients and properties.&quot;&quot;&quot;&#10;    &#10;    # Drag coefficients&#10;    cd_nose: float = 0.15&#10;    cd_body: float = 0.02&#10;    cd_fins: float = 0.01&#10;    cd_base: float = 0.12&#10;    cd_total: float = 0.3&#10;    &#10;    # Lift coefficients&#10;    cl_alpha: float = 2.0  # per radian&#10;    cl_fins: float = 1.5&#10;    &#10;    # Moment coefficients&#10;    cm_alpha: float = -0.1  # per radian&#10;    cm_q: float = -10.0  # pitch damping&#10;    &#10;    # Center of pressure&#10;    center_of_pressure: float = 2.5  # m from nose&#10;    &#10;    # Stability&#10;    static_margin: float = 0.2&#10;    &#10;    # Reference areas&#10;    reference_area: float = 0.0238  # m²&#10;    reference_length: float = 4.0  # m&#10;    &#10;    # Mach number dependent data&#10;    mach_numbers: List[float] = field(default_factory=list)&#10;    cd_mach: List[float] = field(default_factory=list)&#10;&#10;&#10;@dataclass&#10;class Environment:&#10;    &quot;&quot;&quot;Environmental conditions for simulation.&quot;&quot;&quot;&#10;    &#10;    # Atmospheric conditions&#10;    temperature: float = 288.15  # K (15°C)&#10;    pressure: float = 101325.0  # Pa&#10;    humidity: float = 0.5  # relative humidity (0-1)&#10;    &#10;    # Wind conditions&#10;    wind_speed: float = 5.0  # m/s&#10;    wind_direction: float = 270.0  # degrees from north&#10;    wind_altitude_profile: List[Tuple[float, float, float]] = field(default_factory=list)  # (alt, speed, dir)&#10;    &#10;    # Gravity model&#10;    gravity_model: str = &quot;WGS84&quot;  # &quot;constant&quot;, &quot;spherical&quot;, &quot;WGS84&quot;&#10;    local_gravity: float = 9.81  # m/s²&#10;    &#10;    # Location&#10;    latitude: float = -34.6  # degrees&#10;    longitude: float = 20.3  # degrees&#10;    elevation: float = 0.0  # m above sea level&#10;&#10;&#10;@dataclass&#10;class FlightData:&#10;    &quot;&quot;&quot;Flight data point at a specific time.&quot;&quot;&quot;&#10;    &#10;    time: float = 0.0&#10;    &#10;    # Position (Earth-fixed coordinates)&#10;    position_x: float = 0.0  # East&#10;    position_y: float = 0.0  # North&#10;    position_z: float = 0.0  # Up&#10;    &#10;    # Velocity (Earth-fixed coordinates)&#10;    velocity_x: float = 0.0&#10;    velocity_y: float = 0.0&#10;    velocity_z: float = 0.0&#10;    &#10;    # Acceleration (Earth-fixed coordinates)&#10;    acceleration_x: float = 0.0&#10;    acceleration_y: float = 0.0&#10;    acceleration_z: float = 0.0&#10;    &#10;    # Attitude (Euler angles)&#10;    pitch: float = 0.0  # radians&#10;    yaw: float = 0.0    # radians&#10;    roll: float = 0.0   # radians&#10;    &#10;    # Angular velocity&#10;    pitch_rate: float = 0.0  # rad/s&#10;    yaw_rate: float = 0.0    # rad/s&#10;    roll_rate: float = 0.0   # rad/s&#10;    &#10;    # Flight parameters&#10;    altitude: float = 0.0&#10;    velocity_magnitude: float = 0.0&#10;    mach_number: float = 0.0&#10;    dynamic_pressure: float = 0.0&#10;    &#10;    # Forces and moments&#10;    thrust: float = 0.0&#10;    drag: float = 0.0&#10;    lift: float = 0.0&#10;    weight: float = 0.0&#10;    &#10;    # Mass properties&#10;    mass: float = 0.0&#10;    center_of_mass: float = 0.0&#10;    &#10;    # Flight phase&#10;    phase: str = &quot;prelaunch&quot;  # prelaunch, boost, coast, descent, recovery&#10;&#10;&#10;@dataclass&#10;class Trajectory:&#10;    &quot;&quot;&quot;Complete trajectory data for a flight.&quot;&quot;&quot;&#10;    &#10;    flight_data: List[FlightData] = field(default_factory=list)&#10;    &#10;    # Summary statistics&#10;    max_altitude: float = 0.0&#10;    max_velocity: float = 0.0&#10;    max_acceleration: float = 0.0&#10;    max_mach: float = 0.0&#10;    flight_time: float = 0.0&#10;    range_x: float = 0.0&#10;    range_y: float = 0.0&#10;    &#10;    # Key events&#10;    liftoff_time: float = 0.0&#10;    burnout_time: float = 0.0&#10;    apogee_time: float = 0.0&#10;    landing_time: float = 0.0&#10;    &#10;    # Recovery data&#10;    parachute_deployment_time: float = 0.0&#10;    landing_velocity: float = 0.0&#10;    &#10;    def add_data_point(self, data: FlightData) -&gt; None:&#10;        &quot;&quot;&quot;Add a flight data point to the trajectory.&quot;&quot;&quot;&#10;        self.flight_data.append(data)&#10;        &#10;        # Update summary statistics&#10;        if data.altitude &gt; self.max_altitude:&#10;            self.max_altitude = data.altitude&#10;        if data.velocity_magnitude &gt; self.max_velocity:&#10;            self.max_velocity = data.velocity_magnitude&#10;        if abs(data.acceleration_z) &gt; self.max_acceleration:&#10;            self.max_acceleration = abs(data.acceleration_z)&#10;        if data.mach_number &gt; self.max_mach:&#10;            self.max_mach = data.mach_number&#10;            &#10;    def get_dataframe(self) -&gt; pd.DataFrame:&#10;        &quot;&quot;&quot;Convert trajectory data to pandas DataFrame.&quot;&quot;&quot;&#10;        if not self.flight_data:&#10;            return pd.DataFrame()&#10;            &#10;        data_dict = {}&#10;        for field_name in self.flight_data[0].__dataclass_fields__.keys():&#10;            data_dict[field_name] = [getattr(point, field_name) for point in self.flight_data]&#10;            &#10;        return pd.DataFrame(data_dict)&#10;&#10;&#10;@dataclass&#10;class SimulationResults:&#10;    &quot;&quot;&quot;Complete simulation results.&quot;&quot;&quot;&#10;    &#10;    trajectory: Trajectory = field(default_factory=Trajectory)&#10;    parameters: SimulationParameters = field(default_factory=SimulationParameters)&#10;    rocket_config: RocketConfiguration = field(default_factory=RocketConfiguration)&#10;    environment: Environment = field(default_factory=Environment)&#10;    &#10;    # Simulation metadata&#10;    simulation_id: str = &quot;&quot;&#10;    timestamp: datetime = field(default_factory=datetime.now)&#10;    simulation_time: float = 0.0  # computation time&#10;    convergence_status: str = &quot;success&quot;&#10;    &#10;    # Monte Carlo results (if applicable)&#10;    monte_carlo_runs: List[Trajectory] = field(default_factory=list)&#10;    statistical_summary: Dict[str, Any] = field(default_factory=dict)&#10;    &#10;    def save_to_file(self, filepath: str) -&gt; bool:&#10;        &quot;&quot;&quot;Save simulation results to file.&quot;&quot;&quot;&#10;        try:&#10;            # Convert trajectory to DataFrame and save as Excel/CSV&#10;            df = self.trajectory.get_dataframe()&#10;            if filepath.endswith('.xlsx'):&#10;                df.to_excel(filepath, index=False)&#10;            elif filepath.endswith('.csv'):&#10;                df.to_csv(filepath, index=False)&#10;            else:&#10;                return False&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error saving results: {e}&quot;)&#10;            return False&#10;&#10;&#10;class DataManager:&#10;    &quot;&quot;&quot;Manages loading, saving, and processing of simulation data.&quot;&quot;&quot;&#10;    &#10;    def __init__(self, data_directory: str = &quot;&quot;):&#10;        self.data_directory = Path(data_directory) if data_directory else Path.cwd()&#10;        &#10;    def load_simulation_parameters(self, filepath: str) -&gt; SimulationParameters:&#10;        &quot;&quot;&quot;Load simulation parameters from Excel file.&quot;&quot;&quot;&#10;        try:&#10;            df = pd.read_excel(filepath, header=0)&#10;            params = SimulationParameters()&#10;            &#10;            # Column mapping for Excel file&#10;            column_mapping = {&#10;                &quot;Maximum Simulation Time&quot;: &quot;max_simulation_time&quot;,&#10;                &quot;Time Step Size&quot;: &quot;time_step_size&quot;,&#10;                &quot;Launch Latitude&quot;: &quot;launch_latitude&quot;,&#10;                &quot;Launch Longitude&quot;: &quot;launch_longitude&quot;,&#10;                &quot;Launch Altitude&quot;: &quot;launch_altitude&quot;,&#10;                &quot;Launch Elevation&quot;: &quot;launch_elevation&quot;,&#10;                &quot;Launch Azimuth&quot;: &quot;launch_azimuth&quot;,&#10;                &quot;Rocket Body Radius&quot;: &quot;rocket_body_radius&quot;,&#10;                &quot;Rocket Body Length&quot;: &quot;rocket_body_length&quot;,&#10;                &quot;Launch Rail Length&quot;: &quot;launch_rail_length&quot;,&#10;                &quot;Nozzle Exit Area&quot;: &quot;nozzle_exit_area&quot;,&#10;                &quot;Thrust Polynomial Degree&quot;: &quot;thrust_polynomial_degree&quot;,&#10;                &quot;MissileDATCOM Cards&quot;: &quot;missile_datcom_cards&quot;,&#10;                &quot;SolidWorks Mass&quot;: &quot;cad_mass_dry&quot;,&#10;                &quot;SolidWorks COMx&quot;: &quot;cad_com_x&quot;,&#10;                &quot;SolidWorks COMy&quot;: &quot;cad_com_y&quot;,&#10;                &quot;SolidWorks COMz&quot;: &quot;cad_com_z&quot;,&#10;                &quot;SolidWorks MOIx&quot;: &quot;cad_moi_x&quot;,&#10;                &quot;SolidWorks MOIy&quot;: &quot;cad_moi_y&quot;,&#10;                &quot;SolidWorks MOIz&quot;: &quot;cad_moi_z&quot;,&#10;                &quot;Time Burn&quot;: &quot;time_burn&quot;,&#10;                &quot;Density Fuel&quot;: &quot;fuel_density&quot;,&#10;                &quot;Radius Fuel&quot;: &quot;fuel_radius&quot;,&#10;                &quot;CD Parachute&quot;: &quot;parachute_cd&quot;,&#10;                &quot;Diameter Parachute&quot;: &quot;parachute_diameter&quot;,&#10;                &quot;Parachute Deployment Delay&quot;: &quot;parachute_delay&quot;&#10;            }&#10;            &#10;            for excel_col, param_attr in column_mapping.items():&#10;                if excel_col in df.columns and len(df) &gt; 0:&#10;                    value = df.at[0, excel_col]&#10;                    if pd.notna(value):&#10;                        setattr(params, param_attr, float(value))&#10;            &#10;            return params&#10;        except Exception as e:&#10;            print(f&quot;Error loading parameters: {e}&quot;)&#10;            return SimulationParameters()&#10;    &#10;    def save_simulation_parameters(self, params: SimulationParameters, filepath: str) -&gt; bool:&#10;        &quot;&quot;&quot;Save simulation parameters to Excel file.&quot;&quot;&quot;&#10;        try:&#10;            data = {&#10;                &quot;Parameter&quot;: [&#10;                    &quot;Maximum Simulation Time&quot;, &quot;Time Step Size&quot;, &quot;Launch Latitude&quot;,&#10;                    &quot;Launch Longitude&quot;, &quot;Launch Altitude&quot;, &quot;Launch Elevation&quot;,&#10;                    &quot;Launch Azimuth&quot;, &quot;Rocket Body Radius&quot;, &quot;Rocket Body Length&quot;,&#10;                    &quot;Launch Rail Length&quot;, &quot;Nozzle Exit Area&quot;, &quot;Thrust Polynomial Degree&quot;,&#10;                    &quot;MissileDATCOM Cards&quot;, &quot;SolidWorks Mass&quot;, &quot;SolidWorks COMx&quot;,&#10;                    &quot;SolidWorks COMy&quot;, &quot;SolidWorks COMz&quot;, &quot;SolidWorks MOIx&quot;,&#10;                    &quot;SolidWorks MOIy&quot;, &quot;SolidWorks MOIz&quot;, &quot;Time Burn&quot;,&#10;                    &quot;Density Fuel&quot;, &quot;Radius Fuel&quot;, &quot;CD Parachute&quot;,&#10;                    &quot;Diameter Parachute&quot;, &quot;Parachute Deployment Delay&quot;&#10;                ],&#10;                &quot;Value&quot;: [&#10;                    params.max_simulation_time, params.time_step_size, params.launch_latitude,&#10;                    params.launch_longitude, params.launch_altitude, params.launch_elevation,&#10;                    params.launch_azimuth, params.rocket_body_radius, params.rocket_body_length,&#10;                    params.launch_rail_length, params.nozzle_exit_area, params.thrust_polynomial_degree,&#10;                    params.missile_datcom_cards, params.cad_mass_dry, params.cad_com_x,&#10;                    params.cad_com_y, params.cad_com_z, params.cad_moi_x,&#10;                    params.cad_moi_y, params.cad_moi_z, params.time_burn,&#10;                    params.fuel_density, params.fuel_radius, params.parachute_cd,&#10;                    params.parachute_diameter, params.parachute_delay&#10;                ]&#10;            }&#10;            &#10;            df = pd.DataFrame(data)&#10;            df.to_excel(filepath, index=False)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error saving parameters: {e}&quot;)&#10;            return False&#10;    &#10;    def load_thrust_curve(self, filepath: str) -&gt; Tuple[List[float], List[float]]:&#10;        &quot;&quot;&quot;Load thrust curve data from Excel file.&quot;&quot;&quot;&#10;        try:&#10;            df = pd.read_excel(filepath)&#10;            time_col = df.columns[0]&#10;            thrust_col = df.columns[1]&#10;            &#10;            time_data = df[time_col].dropna().tolist()&#10;            thrust_data = df[thrust_col].dropna().tolist()&#10;            &#10;            return time_data, thrust_data&#10;        except Exception as e:&#10;            print(f&quot;Error loading thrust curve: {e}&quot;)&#10;            return [], []&#10;    &#10;    def load_aerodynamic_data(self, filepath: str) -&gt; Aerodynamics:&#10;        &quot;&quot;&quot;Load aerodynamic coefficients from file.&quot;&quot;&quot;&#10;        try:&#10;            df = pd.read_excel(filepath)&#10;            aero = Aerodynamics()&#10;            &#10;            # Map columns to aerodynamic properties&#10;            if 'Mach' in df.columns:&#10;                aero.mach_numbers = df['Mach'].dropna().tolist()&#10;            if 'CD' in df.columns:&#10;                aero.cd_mach = df['CD'].dropna().tolist()&#10;            if 'CL_alpha' in df.columns and not df['CL_alpha'].empty:&#10;                aero.cl_alpha = df['CL_alpha'].iloc[0]&#10;            if 'CM_alpha' in df.columns and not df['CM_alpha'].empty:&#10;                aero.cm_alpha = df['CM_alpha'].iloc[0]&#10;                &#10;            return aero&#10;        except Exception as e:&#10;            print(f&quot;Error loading aerodynamic data: {e}&quot;)&#10;            return Aerodynamics()&#10;    &#10;    def export_trajectory(self, trajectory: Trajectory, filepath: str, format: str = &quot;excel&quot;) -&gt; bool:&#10;        &quot;&quot;&quot;Export trajectory data to file.&quot;&quot;&quot;&#10;        try:&#10;            df = trajectory.get_dataframe()&#10;            &#10;            if format.lower() == &quot;excel&quot;:&#10;                df.to_excel(filepath, index=False)&#10;            elif format.lower() == &quot;csv&quot;:&#10;                df.to_csv(filepath, index=False)&#10;            else:&#10;                return False&#10;                &#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error exporting trajectory: {e}&quot;)&#10;            return False&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/models/rocket.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/models/rocket.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Data models for the ASRI Simulator application.&#10;&quot;&quot;&quot;&#10;&#10;from dataclasses import dataclass&#10;from typing import Dict, Any, Optional, List&#10;import pandas as pd&#10;from pathlib import Path&#10;&#10;&#10;@dataclass&#10;class SimulationParameters:&#10;    &quot;&quot;&quot;Data class for simulation parameters.&quot;&quot;&quot;&#10;    &#10;    # Time and location parameters&#10;    max_simulation_time: float = 1200.0&#10;    time_step_size: float = 0.02&#10;    launch_latitude: float = -34.600&#10;    launch_longitude: float = 20.300&#10;    launch_altitude: float = 0.000&#10;    launch_elevation: float = 80.000&#10;    launch_azimuth: float = -100.000&#10;    &#10;    # Rocket geometry&#10;    rocket_body_radius: float = 0.087&#10;    rocket_body_length: float = 4.920&#10;    launch_rail_length: float = 7.0&#10;    nozzle_exit_area: float = 0.007056&#10;    &#10;    # Analysis parameters&#10;    thrust_polynomial_degree: int = 6&#10;    missile_datcom_cards: int = 20&#10;    &#10;    # Mass properties (dry)&#10;    cad_mass_dry: float = 49.35224149&#10;    cad_com_x: float = 1.386632&#10;    cad_com_y: float = 0.0&#10;    cad_com_z: float = 0.0&#10;    cad_moi_x: float = 0.04023116&#10;    cad_moi_y: float = 180.8297&#10;    cad_moi_z: float = 180.8297&#10;    &#10;    # Propulsion&#10;    time_burn: float = 17.1&#10;    fuel_density: float = 1065.0&#10;    fuel_radius: float = 0.0735&#10;    &#10;    # Recovery&#10;    parachute_cd: float = 1.3&#10;    parachute_diameter: float = 1.0&#10;    parachute_delay: float = 10.0&#10;&#10;&#10;@dataclass&#10;class RocketConfiguration:&#10;    &quot;&quot;&quot;Data class for rocket configuration.&quot;&quot;&quot;&#10;    body_radius: float&#10;    body_length: float&#10;    mass_dry: float&#10;    center_of_mass: tuple&#10;    moments_of_inertia: tuple&#10;    nozzle_exit_area: float&#10;&#10;&#10;@dataclass&#10;class SimulationResults:&#10;    &quot;&quot;&quot;Data class for simulation results.&quot;&quot;&quot;&#10;    time: List[float]&#10;    altitude: List[float]&#10;    velocity: List[float]&#10;    acceleration: List[float]&#10;    position_x: List[float]&#10;    position_y: List[float]&#10;    position_z: List[float]&#10;    &#10;    &#10;class DataManager:&#10;    &quot;&quot;&quot;Manages data loading and saving operations.&quot;&quot;&quot;&#10;    &#10;    def __init__(self, base_path: str = &quot;.&quot;):&#10;        self.base_path = Path(base_path)&#10;    &#10;    def load_settings(self, file_path: str) -&gt; Dict[str, Any]:&#10;        &quot;&quot;&quot;Load settings from Excel file.&quot;&quot;&quot;&#10;        try:&#10;            df = pd.read_excel(file_path, header=0)&#10;            return df.to_dict('records')[0] if not df.empty else {}&#10;        except Exception as e:&#10;            print(f&quot;Error loading settings: {e}&quot;)&#10;            return {}&#10;    &#10;    def save_results(self, results: SimulationResults, file_path: str) -&gt; bool:&#10;        &quot;&quot;&quot;Save simulation results to file.&quot;&quot;&quot;&#10;        try:&#10;            data = {&#10;                'Time': results.time,&#10;                'Altitude': results.altitude,&#10;                'Velocity': results.velocity,&#10;                'Acceleration': results.acceleration,&#10;                'Position_X': results.position_x,&#10;                'Position_Y': results.position_y,&#10;                'Position_Z': results.position_z&#10;            }&#10;            df = pd.DataFrame(data)&#10;            df.to_excel(file_path, index=False)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error saving results: {e}&quot;)&#10;            return False" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/pyproject.toml">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/pyproject.toml" />
              <option name="updatedContent" value="[tool.poetry]&#10;name = &quot;asri-simulator&quot;&#10;version = &quot;2.3.12&quot;&#10;description = &quot;Python Rocket Performance Simulator (PyROPS)&quot;&#10;authors = [&quot;Aerospace Systems Research Institute&quot;]&#10;readme = &quot;README.md&quot;&#10;packages = [{include = &quot;asri_simulator&quot;}]&#10;&#10;[tool.poetry.dependencies]&#10;python = &quot;^3.8&quot;&#10;numpy = &quot;^1.21.0&quot;&#10;pandas = &quot;^1.3.0&quot;&#10;scipy = &quot;^1.7.0&quot;&#10;matplotlib = &quot;^3.4.0&quot;&#10;pillow = &quot;^8.0.0&quot;&#10;pygame = &quot;^2.1.0&quot;&#10;pyopengl = &quot;^3.1.0&quot;&#10;pyopengl-accelerate = &quot;^3.1.0&quot;&#10;openpyxl = &quot;^3.0.0&quot;&#10;&#10;[tool.poetry.group.dev.dependencies]&#10;pytest = &quot;^7.0.0&quot;&#10;black = &quot;^23.0.0&quot;&#10;flake8 = &quot;^6.0.0&quot;&#10;&#10;[build-system]&#10;requires = [&quot;poetry-core&quot;]&#10;build-backend = &quot;poetry.core.masonry.api&quot;&#10;&#10;[tool.poetry.scripts]&#10;pyrops = &quot;asri_simulator.launcher:main&quot;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/utils.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/utils.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Utility functions and helpers for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;import subprocess&#10;import webbrowser&#10;from pathlib import Path&#10;from typing import Dict, List, Optional, Union&#10;import pandas as pd&#10;import numpy as np&#10;&#10;&#10;class FileManager:&#10;    &quot;&quot;&quot;File management utilities.&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def ensure_directory_exists(path: Union[str, Path]) -&gt; Path:&#10;        &quot;&quot;&quot;Ensure a directory exists, create if it doesn't.&quot;&quot;&quot;&#10;        path_obj = Path(path)&#10;        path_obj.mkdir(parents=True, exist_ok=True)&#10;        return path_obj&#10;    &#10;    @staticmethod&#10;    def read_path_file(filename: str = &quot;Path.txt&quot;) -&gt; str:&#10;        &quot;&quot;&quot;Read the working directory from path file.&quot;&quot;&quot;&#10;        try:&#10;            with open(filename, 'r') as f:&#10;                return f.read().strip()&#10;        except FileNotFoundError:&#10;            return os.getcwd()&#10;    &#10;    @staticmethod&#10;    def write_path_file(directory: str, filename: str = &quot;Path.txt&quot;) -&gt; bool:&#10;        &quot;&quot;&quot;Write the working directory to path file.&quot;&quot;&quot;&#10;        try:&#10;            with open(filename, 'w') as f:&#10;                f.write(directory)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error writing path file: {e}&quot;)&#10;            return False&#10;    &#10;    @staticmethod&#10;    def validate_file_exists(filepath: Union[str, Path]) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a file exists.&quot;&quot;&quot;&#10;        return Path(filepath).exists()&#10;&#10;&#10;class ExternalTools:&#10;    &quot;&quot;&quot;Interface to external tools and applications.&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def open_website(url: str) -&gt; bool:&#10;        &quot;&quot;&quot;Open a website in the default browser.&quot;&quot;&quot;&#10;        try:&#10;            webbrowser.open(url)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error opening website: {e}&quot;)&#10;            return False&#10;    &#10;    @staticmethod&#10;    def run_missile_datcom(input_file: str, output_dir: str) -&gt; bool:&#10;        &quot;&quot;&quot;Run MissileDATCOM analysis.&quot;&quot;&quot;&#10;        try:&#10;            # Placeholder for MissileDATCOM execution&#10;            print(f&quot;Running MissileDATCOM with input: {input_file}&quot;)&#10;            # subprocess.run(['datcom.exe', input_file], cwd=output_dir)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error running MissileDATCOM: {e}&quot;)&#10;            return False&#10;    &#10;    @staticmethod&#10;    def open_file_explorer(directory: str) -&gt; bool:&#10;        &quot;&quot;&quot;Open file explorer at specified directory.&quot;&quot;&quot;&#10;        try:&#10;            if os.name == 'nt':  # Windows&#10;                os.startfile(directory)&#10;            elif os.name == 'posix':  # macOS and Linux&#10;                subprocess.run(['open', directory])&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error opening file explorer: {e}&quot;)&#10;            return False&#10;&#10;&#10;class DataProcessor:&#10;    &quot;&quot;&quot;Data processing and analysis utilities.&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def interpolate_data(x_data: List[float], y_data: List[float], &#10;                        x_new: List[float]) -&gt; List[float]:&#10;        &quot;&quot;&quot;Interpolate data using linear interpolation.&quot;&quot;&quot;&#10;        try:&#10;            return np.interp(x_new, x_data, y_data).tolist()&#10;        except Exception as e:&#10;            print(f&quot;Error interpolating data: {e}&quot;)&#10;            return []&#10;    &#10;    @staticmethod&#10;    def smooth_data(data: List[float], window_size: int = 5) -&gt; List[float]:&#10;        &quot;&quot;&quot;Smooth data using a moving average.&quot;&quot;&quot;&#10;        try:&#10;            data_array = np.array(data)&#10;            smoothed = np.convolve(data_array, np.ones(window_size)/window_size, mode='same')&#10;            return smoothed.tolist()&#10;        except Exception as e:&#10;            print(f&quot;Error smoothing data: {e}&quot;)&#10;            return data&#10;    &#10;    @staticmethod&#10;    def calculate_statistics(data: List[float]) -&gt; Dict[str, float]:&#10;        &quot;&quot;&quot;Calculate basic statistics for a dataset.&quot;&quot;&quot;&#10;        try:&#10;            data_array = np.array(data)&#10;            return {&#10;                'mean': float(np.mean(data_array)),&#10;                'std': float(np.std(data_array)),&#10;                'min': float(np.min(data_array)),&#10;                'max': float(np.max(data_array)),&#10;                'median': float(np.median(data_array)),&#10;                'count': len(data)&#10;            }&#10;        except Exception as e:&#10;            print(f&quot;Error calculating statistics: {e}&quot;)&#10;            return {}&#10;&#10;&#10;class ParameterValidator:&#10;    &quot;&quot;&quot;Validate simulation parameters.&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def validate_time_parameters(max_time: float, time_step: float) -&gt; List[str]:&#10;        &quot;&quot;&quot;Validate time-related parameters.&quot;&quot;&quot;&#10;        errors = []&#10;        &#10;        if max_time &lt;= 0:&#10;            errors.append(&quot;Maximum simulation time must be positive&quot;)&#10;        &#10;        if time_step &lt;= 0:&#10;            errors.append(&quot;Time step size must be positive&quot;)&#10;        &#10;        if time_step &gt; max_time:&#10;            errors.append(&quot;Time step size cannot be larger than maximum simulation time&quot;)&#10;        &#10;        if max_time / time_step &gt; 1000000:&#10;            errors.append(&quot;Time step too small - will result in excessive computation time&quot;)&#10;        &#10;        return errors&#10;    &#10;    @staticmethod&#10;    def validate_geometry_parameters(radius: float, length: float) -&gt; List[str]:&#10;        &quot;&quot;&quot;Validate rocket geometry parameters.&quot;&quot;&quot;&#10;        errors = []&#10;        &#10;        if radius &lt;= 0:&#10;            errors.append(&quot;Rocket body radius must be positive&quot;)&#10;        &#10;        if length &lt;= 0:&#10;            errors.append(&quot;Rocket body length must be positive&quot;)&#10;        &#10;        if length / radius &lt; 5:&#10;            errors.append(&quot;Rocket length-to-diameter ratio is very low&quot;)&#10;        &#10;        return errors&#10;    &#10;    @staticmethod&#10;    def validate_mass_properties(mass: float, com_x: float, moi_values: List[float]) -&gt; List[str]:&#10;        &quot;&quot;&quot;Validate mass properties.&quot;&quot;&quot;&#10;        errors = []&#10;        &#10;        if mass &lt;= 0:&#10;            errors.append(&quot;Mass must be positive&quot;)&#10;        &#10;        if any(moi &lt;= 0 for moi in moi_values):&#10;            errors.append(&quot;Moments of inertia must be positive&quot;)&#10;        &#10;        return errors&#10;&#10;&#10;class Logger:&#10;    &quot;&quot;&quot;Simple logging utility.&quot;&quot;&quot;&#10;    &#10;    def __init__(self, log_file: str = &quot;simulation.log&quot;):&#10;        self.log_file = log_file&#10;        &#10;    def log(self, message: str, level: str = &quot;INFO&quot;):&#10;        &quot;&quot;&quot;Log a message with timestamp.&quot;&quot;&quot;&#10;        import datetime&#10;        timestamp = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)&#10;        log_entry = f&quot;[{timestamp}] {level}: {message}&quot;&#10;        &#10;        print(log_entry)&#10;        &#10;        try:&#10;            with open(self.log_file, 'a') as f:&#10;                f.write(log_entry + &quot;\n&quot;)&#10;        except Exception as e:&#10;            print(f&quot;Error writing to log file: {e}&quot;)&#10;    &#10;    def info(self, message: str):&#10;        &quot;&quot;&quot;Log an info message.&quot;&quot;&quot;&#10;        self.log(message, &quot;INFO&quot;)&#10;    &#10;    def warning(self, message: str):&#10;        &quot;&quot;&quot;Log a warning message.&quot;&quot;&quot;&#10;        self.log(message, &quot;WARNING&quot;)&#10;    &#10;    def error(self, message: str):&#10;        &quot;&quot;&quot;Log an error message.&quot;&quot;&quot;&#10;        self.log(message, &quot;ERROR&quot;)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/utils/__init__.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/utils/__init__.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Utility functions and helpers for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;from .helpers import *&#10;&#10;__all__ = [&#10;    'get_project_root',&#10;    'validate_file_path',&#10;    'safe_float_conversion',&#10;    'safe_int_conversion',&#10;    'normalize_path',&#10;    'create_directory_if_not_exists',&#10;    'load_excel_data',&#10;    'calculate_distance',&#10;    'degrees_to_radians',&#10;    'radians_to_degrees',&#10;    'FileManager',&#10;    'ValidationUtils'&#10;]&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Utility functions and helpers for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;from .utils import *&#10;&#10;__all__ = [&#10;    'get_project_root',&#10;    'validate_file_path',&#10;    'safe_float_conversion',&#10;    'safe_int_conversion',&#10;    'normalize_path',&#10;    'create_directory_if_not_exists',&#10;    'load_excel_data',&#10;    'calculate_distance',&#10;    'degrees_to_radians',&#10;    'radians_to_degrees',&#10;    'FileManager',&#10;    'ValidationUtils'&#10;]" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/utils/helpers.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/utils/helpers.py" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Utility functions for the ASRI Simulator application.&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;import sys&#10;import pandas as pd&#10;from pathlib import Path&#10;from typing import Dict, Any, Optional, Union&#10;import numpy as np&#10;&#10;&#10;def get_project_root() -&gt; Path:&#10;    &quot;&quot;&quot;Get the project root directory.&quot;&quot;&quot;&#10;    return Path(__file__).parent.parent&#10;&#10;&#10;def validate_file_path(file_path: Union[str, Path]) -&gt; bool:&#10;    &quot;&quot;&quot;Validate if a file path exists.&quot;&quot;&quot;&#10;    return Path(file_path).exists()&#10;&#10;&#10;def safe_float_conversion(value: Any, default: float = 0.0) -&gt; float:&#10;    &quot;&quot;&quot;Safely convert a value to float with a default fallback.&quot;&quot;&quot;&#10;    try:&#10;        return float(value)&#10;    except (ValueError, TypeError):&#10;        return default&#10;&#10;&#10;def safe_int_conversion(value: Any, default: int = 0) -&gt; int:&#10;    &quot;&quot;&quot;Safely convert a value to int with a default fallback.&quot;&quot;&quot;&#10;    try:&#10;        return int(value)&#10;    except (ValueError, TypeError):&#10;        return default&#10;&#10;&#10;def normalize_path(path: str) -&gt; str:&#10;    &quot;&quot;&quot;Normalize file paths for cross-platform compatibility.&quot;&quot;&quot;&#10;    return os.path.normpath(path).replace('\\', os.sep)&#10;&#10;&#10;def create_directory_if_not_exists(directory: Union[str, Path]) -&gt; bool:&#10;    &quot;&quot;&quot;Create directory if it doesn't exist.&quot;&quot;&quot;&#10;    try:&#10;        Path(directory).mkdir(parents=True, exist_ok=True)&#10;        return True&#10;    except Exception as e:&#10;        print(f&quot;Error creating directory {directory}: {e}&quot;)&#10;        return False&#10;&#10;&#10;def load_excel_data(file_path: str, sheet_name: Optional[str] = None) -&gt; Optional[pd.DataFrame]:&#10;    &quot;&quot;&quot;Load data from Excel file with error handling.&quot;&quot;&quot;&#10;    try:&#10;        if sheet_name:&#10;            return pd.read_excel(file_path, sheet_name=sheet_name, header=0)&#10;        else:&#10;            return pd.read_excel(file_path, header=0)&#10;    except Exception as e:&#10;        print(f&quot;Error loading Excel file {file_path}: {e}&quot;)&#10;        return None&#10;&#10;&#10;def calculate_distance(x1: float, y1: float, x2: float, y2: float) -&gt; float:&#10;    &quot;&quot;&quot;Calculate Euclidean distance between two points.&quot;&quot;&quot;&#10;    return np.sqrt((x2 - x1)**2 + (y2 - y1)**2)&#10;&#10;&#10;def degrees_to_radians(degrees: float) -&gt; float:&#10;    &quot;&quot;&quot;Convert degrees to radians.&quot;&quot;&quot;&#10;    return np.radians(degrees)&#10;&#10;&#10;def radians_to_degrees(radians: float) -&gt; float:&#10;    &quot;&quot;&quot;Convert radians to degrees.&quot;&quot;&quot;&#10;    return np.degrees(radians)&#10;&#10;&#10;class FileManager:&#10;    &quot;&quot;&quot;File management utilities.&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def read_text_file(file_path: str) -&gt; Optional[str]:&#10;        &quot;&quot;&quot;Read text file content.&quot;&quot;&quot;&#10;        try:&#10;            with open(file_path, 'r', encoding='utf-8') as file:&#10;                return file.read()&#10;        except Exception as e:&#10;            print(f&quot;Error reading file {file_path}: {e}&quot;)&#10;            return None&#10;    &#10;    @staticmethod&#10;    def write_text_file(file_path: str, content: str) -&gt; bool:&#10;        &quot;&quot;&quot;Write content to text file.&quot;&quot;&quot;&#10;        try:&#10;            with open(file_path, 'w', encoding='utf-8') as file:&#10;                file.write(content)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error writing file {file_path}: {e}&quot;)&#10;            return False&#10;    &#10;    @staticmethod&#10;    def get_file_extension(file_path: str) -&gt; str:&#10;        &quot;&quot;&quot;Get file extension.&quot;&quot;&quot;&#10;        return Path(file_path).suffix.lower()&#10;&#10;&#10;class ValidationUtils:&#10;    &quot;&quot;&quot;Validation utility functions.&quot;&quot;&quot;&#10;    &#10;    @staticmethod&#10;    def validate_numeric_range(value: float, min_val: float, max_val: float) -&gt; bool:&#10;        &quot;&quot;&quot;Validate if a numeric value is within a specified range.&quot;&quot;&quot;&#10;        return min_val &lt;= value &lt;= max_val&#10;    &#10;    @staticmethod&#10;    def validate_positive_number(value: float) -&gt; bool:&#10;        &quot;&quot;&quot;Validate if a number is positive.&quot;&quot;&quot;&#10;        return value &gt; 0&#10;    &#10;    @staticmethod&#10;    def validate_coordinates(latitude: float, longitude: float) -&gt; bool:&#10;        &quot;&quot;&quot;Validate geographic coordinates.&quot;&quot;&quot;&#10;        return (-90 &lt;= latitude &lt;= 90) and (-180 &lt;= longitude &lt;= 180)" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/ASRI_Simulator_New/utils/utils.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/ASRI_Simulator_New/utils/utils.py" />
              <option name="originalContent" value="&quot;&quot;&quot;&#10;Utility functions and helpers for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;import webbrowser&#10;from pathlib import Path&#10;from typing import Dict, List, Optional, Union&#10;from typing import Dict, List, Optional, Union&#10;import numpy as np&#10;&#10;&#10;class FileManager:&#10;    &quot;&quot;&quot;File management utilities.&quot;&quot;&quot;&#10;        try:&#10;            data_array = np.array(data)&#10;            smoothed = np.convolve(data_array, np.ones(window_size)/window_size, mode='same')&#10;            return smoothed.tolist()&#10;        except Exception as e:&#10;            print(f&quot;Error smoothing data: {e}&quot;)&#10;            return data&#10;&#10;    @staticmethod&#10;    def calculate_statistics(data: List[float]) -&gt; Dict[str, float]:&#10;        &quot;&quot;&quot;Calculate basic statistics for a dataset.&quot;&quot;&quot;&#10;        try:&#10;            data_array = np.array(data)&#10;            return {&#10;                'mean': float(np.mean(data_array)),&#10;                'std': float(np.std(data_array)),&#10;                'min': float(np.min(data_array)),&#10;                'max': float(np.max(data_array)),&#10;                'median': float(np.median(data_array)),&#10;                'count': len(data)&#10;            }&#10;        except Exception as e:&#10;            print(f&quot;Error calculating statistics: {e}&quot;)&#10;            return {}&#10;&#10;&#10;class ParameterValidator:&#10;    &quot;&quot;&quot;Validate simulation parameters.&quot;&quot;&quot;&#10;&#10;    @staticmethod&#10;    def validate_time_parameters(max_time: float, time_step: float) -&gt; List[str]:&#10;        &quot;&quot;&quot;Validate time-related parameters.&quot;&quot;&quot;&#10;        errors = []&#10;&#10;        if max_time &lt;= 0:&#10;&#10;class ExternalTools:&#10;    &quot;&quot;&quot;Interface to external tools and applications.&quot;&quot;&quot;&#10;&#10;        if max_time / time_step &gt; 1000000:&#10;            errors.append(&quot;Time step too small - will result in excessive computation time&quot;)&#10;&#10;        return errors&#10;&#10;    @staticmethod&#10;    def validate_geometry_parameters(radius: float, length: float) -&gt; List[str]:&#10;        &quot;&quot;&quot;Validate rocket geometry parameters.&quot;&quot;&quot;&#10;        errors = []&#10;&#10;        if radius &lt;= 0:&#10;            errors.append(&quot;Rocket body radius must be positive&quot;)&#10;&#10;        if length &lt;= 0:&#10;            errors.append(&quot;Rocket body length must be positive&quot;)&#10;&#10;        if length / radius &lt; 5:&#10;            errors.append(&quot;Rocket length-to-diameter ratio is very low&quot;)&#10;&#10;        return errors&#10;&#10;    @staticmethod&#10;    def validate_mass_properties(mass: float, com_x: float, moi_values: List[float]) -&gt; List[str]:&#10;        &quot;&quot;&quot;Validate mass properties.&quot;&quot;&quot;&#10;        errors = []&#10;&#10;        if mass &lt;= 0:&#10;            errors.append(&quot;Mass must be positive&quot;)&#10;&#10;        if any(moi &lt;= 0 for moi in moi_values):&#10;            errors.append(&quot;Moments of inertia must be positive&quot;)&#10;&#10;        return errors&#10;&#10;&#10;class Logger:&#10;    &quot;&quot;&quot;Simple logging utility.&quot;&quot;&quot;&#10;&#10;    def __init__(self, log_file: str = &quot;simulation.log&quot;):&#10;        self.log_file = log_file&#10;&#10;    def log(self, message: str, level: str = &quot;INFO&quot;):&#10;        &quot;&quot;&quot;Log a message with timestamp.&quot;&quot;&quot;&#10;        import datetime&#10;        timestamp = datetime.datetime.now().strftime(&quot;%Y-%m-%d %H:%M:%S&quot;)&#10;        log_entry = f&quot;[{timestamp}] {level}: {message}&quot;&#10;&#10;        print(log_entry)&#10;&#10;        try:&#10;            with open(self.log_file, 'a') as f:&#10;                f.write(log_entry + &quot;\n&quot;)&#10;        except Exception as e:&#10;            print(f&quot;Error writing to log file: {e}&quot;)&#10;&#10;    def info(self, message: str):&#10;        &quot;&quot;&quot;Log an info message.&quot;&quot;&quot;&#10;        self.log(message, &quot;INFO&quot;)&#10;&#10;    def warning(self, message: str):&#10;        &quot;&quot;&quot;Log a warning message.&quot;&quot;&quot;&#10;        self.log(message, &quot;WARNING&quot;)&#10;&#10;    def error(self, message: str):&#10;        &quot;&quot;&quot;Log an error message.&quot;&quot;&quot;&#10;        self.log(message, &quot;ERROR&quot;)&#10;" />
              <option name="updatedContent" value="&quot;&quot;&quot;&#10;Utility functions and helpers for the ASRI Simulator.&#10;&quot;&quot;&quot;&#10;&#10;import os&#10;import math&#10;import subprocess&#10;import webbrowser&#10;from pathlib import Path&#10;from typing import Dict, List, Optional, Union, Any, Tuple&#10;import pandas as pd&#10;import numpy as np&#10;&#10;&#10;def get_project_root() -&gt; Path:&#10;    &quot;&quot;&quot;Get the project root directory.&quot;&quot;&quot;&#10;    current_path = Path(__file__).parent&#10;    while current_path != current_path.parent:&#10;        if (current_path / &quot;pyproject.toml&quot;).exists() or (current_path / &quot;setup.py&quot;).exists():&#10;            return current_path&#10;        current_path = current_path.parent&#10;    return Path.cwd()&#10;&#10;&#10;def validate_file_path(filepath: Union[str, Path]) -&gt; bool:&#10;    &quot;&quot;&quot;Validate if a file path exists and is accessible.&quot;&quot;&quot;&#10;    try:&#10;        path_obj = Path(filepath)&#10;        return path_obj.exists() and path_obj.is_file()&#10;    except Exception:&#10;        return False&#10;&#10;&#10;def safe_float_conversion(value: Any, default: float = 0.0) -&gt; float:&#10;    &quot;&quot;&quot;Safely convert a value to float with fallback.&quot;&quot;&quot;&#10;    try:&#10;        if pd.isna(value):&#10;            return default&#10;        return float(value)&#10;    except (ValueError, TypeError):&#10;        return default&#10;&#10;&#10;def safe_int_conversion(value: Any, default: int = 0) -&gt; int:&#10;    &quot;&quot;&quot;Safely convert a value to integer with fallback.&quot;&quot;&quot;&#10;    try:&#10;        if pd.isna(value):&#10;            return default&#10;        return int(float(value))  # Convert to float first to handle string numbers&#10;    except (ValueError, TypeError):&#10;        return default&#10;&#10;&#10;def normalize_path(path: Union[str, Path]) -&gt; Path:&#10;    &quot;&quot;&quot;Normalize a file path and resolve it.&quot;&quot;&quot;&#10;    return Path(path).resolve()&#10;&#10;&#10;def create_directory_if_not_exists(directory: Union[str, Path]) -&gt; Path:&#10;    &quot;&quot;&quot;Create a directory if it doesn't exist.&quot;&quot;&quot;&#10;    path_obj = Path(directory)&#10;    path_obj.mkdir(parents=True, exist_ok=True)&#10;    return path_obj&#10;&#10;&#10;def load_excel_data(filepath: Union[str, Path], sheet_name: Optional[str] = None, **kwargs) -&gt; pd.DataFrame:&#10;    &quot;&quot;&quot;Load data from Excel file with error handling.&quot;&quot;&quot;&#10;    try:&#10;        if sheet_name:&#10;            return pd.read_excel(filepath, sheet_name=sheet_name, **kwargs)&#10;        else:&#10;            return pd.read_excel(filepath, **kwargs)&#10;    except Exception as e:&#10;        print(f&quot;Error loading Excel file {filepath}: {e}&quot;)&#10;        return pd.DataFrame()&#10;&#10;&#10;def calculate_distance(lat1: float, lon1: float, lat2: float, lon2: float) -&gt; float:&#10;    &quot;&quot;&quot;Calculate distance between two geographical points using Haversine formula.&quot;&quot;&quot;&#10;    # Convert latitude and longitude from degrees to radians&#10;    lat1, lon1, lat2, lon2 = map(math.radians, [lat1, lon1, lat2, lon2])&#10;    &#10;    # Haversine formula&#10;    dlat = lat2 - lat1&#10;    dlon = lon2 - lon1&#10;    a = math.sin(dlat/2)**2 + math.cos(lat1) * math.cos(lat2) * math.sin(dlon/2)**2&#10;    c = 2 * math.asin(math.sqrt(a))&#10;    &#10;    # Radius of earth in kilometers&#10;    r = 6371&#10;    return c * r&#10;&#10;&#10;def degrees_to_radians(degrees: float) -&gt; float:&#10;    &quot;&quot;&quot;Convert degrees to radians.&quot;&quot;&quot;&#10;    return math.radians(degrees)&#10;&#10;&#10;def radians_to_degrees(radians: float) -&gt; float:&#10;    &quot;&quot;&quot;Convert radians to degrees.&quot;&quot;&quot;&#10;    return math.degrees(radians)&#10;&#10;&#10;class FileManager:&#10;    &quot;&quot;&quot;File management utilities.&quot;&quot;&quot;&#10;&#10;    @staticmethod&#10;    def ensure_directory_exists(path: Union[str, Path]) -&gt; Path:&#10;        &quot;&quot;&quot;Ensure a directory exists, create if it doesn't.&quot;&quot;&quot;&#10;        path_obj = Path(path)&#10;        path_obj.mkdir(parents=True, exist_ok=True)&#10;        return path_obj&#10;&#10;    @staticmethod&#10;    def read_path_file(filename: str = &quot;Path.txt&quot;) -&gt; str:&#10;        &quot;&quot;&quot;Read the working directory from path file.&quot;&quot;&quot;&#10;        try:&#10;            with open(filename, 'r') as f:&#10;                return f.read().strip()&#10;        except FileNotFoundError:&#10;            return os.getcwd()&#10;&#10;    @staticmethod&#10;    def write_path_file(directory: str, filename: str = &quot;Path.txt&quot;) -&gt; bool:&#10;        &quot;&quot;&quot;Write the working directory to path file.&quot;&quot;&quot;&#10;        try:&#10;            with open(filename, 'w') as f:&#10;                f.write(directory)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error writing path file: {e}&quot;)&#10;            return False&#10;&#10;    @staticmethod&#10;    def validate_file_exists(filepath: Union[str, Path]) -&gt; bool:&#10;        &quot;&quot;&quot;Check if a file exists.&quot;&quot;&quot;&#10;        return Path(filepath).exists()&#10;&#10;    @staticmethod&#10;    def get_file_size(filepath: Union[str, Path]) -&gt; int:&#10;        &quot;&quot;&quot;Get file size in bytes.&quot;&quot;&quot;&#10;        try:&#10;            return Path(filepath).stat().st_size&#10;        except (OSError, FileNotFoundError):&#10;            return 0&#10;&#10;    @staticmethod&#10;    def copy_file(source: Union[str, Path], destination: Union[str, Path]) -&gt; bool:&#10;        &quot;&quot;&quot;Copy a file from source to destination.&quot;&quot;&quot;&#10;        try:&#10;            import shutil&#10;            shutil.copy2(source, destination)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error copying file: {e}&quot;)&#10;            return False&#10;&#10;&#10;class ValidationUtils:&#10;    &quot;&quot;&quot;Validation utilities for data and parameters.&quot;&quot;&quot;&#10;&#10;    @staticmethod&#10;    def validate_positive_number(value: Union[int, float], name: str = &quot;Value&quot;) -&gt; bool:&#10;        &quot;&quot;&quot;Validate that a number is positive.&quot;&quot;&quot;&#10;        try:&#10;            num_value = float(value)&#10;            if num_value &lt;= 0:&#10;                print(f&quot;{name} must be positive, got: {value}&quot;)&#10;                return False&#10;            return True&#10;        except (ValueError, TypeError):&#10;            print(f&quot;{name} must be a valid number, got: {value}&quot;)&#10;            return False&#10;&#10;    @staticmethod&#10;    def validate_range(value: Union[int, float], min_val: float, max_val: float, name: str = &quot;Value&quot;) -&gt; bool:&#10;        &quot;&quot;&quot;Validate that a value is within a specified range.&quot;&quot;&quot;&#10;        try:&#10;            num_value = float(value)&#10;            if not (min_val &lt;= num_value &lt;= max_val):&#10;                print(f&quot;{name} must be between {min_val} and {max_val}, got: {value}&quot;)&#10;                return False&#10;            return True&#10;        except (ValueError, TypeError):&#10;            print(f&quot;{name} must be a valid number, got: {value}&quot;)&#10;            return False&#10;&#10;    @staticmethod&#10;    def validate_file_extension(filepath: Union[str, Path], allowed_extensions: List[str]) -&gt; bool:&#10;        &quot;&quot;&quot;Validate that a file has an allowed extension.&quot;&quot;&quot;&#10;        path_obj = Path(filepath)&#10;        extension = path_obj.suffix.lower()&#10;        &#10;        if extension not in [ext.lower() for ext in allowed_extensions]:&#10;            print(f&quot;File extension '{extension}' not allowed. Allowed: {allowed_extensions}&quot;)&#10;            return False&#10;        return True&#10;&#10;    @staticmethod&#10;    def validate_coordinates(latitude: float, longitude: float) -&gt; bool:&#10;        &quot;&quot;&quot;Validate geographical coordinates.&quot;&quot;&quot;&#10;        if not ValidationUtils.validate_range(latitude, -90, 90, &quot;Latitude&quot;):&#10;            return False&#10;        if not ValidationUtils.validate_range(longitude, -180, 180, &quot;Longitude&quot;):&#10;            return False&#10;        return True&#10;&#10;    @staticmethod&#10;    def validate_excel_columns(df: pd.DataFrame, required_columns: List[str]) -&gt; bool:&#10;        &quot;&quot;&quot;Validate that required columns exist in a DataFrame.&quot;&quot;&quot;&#10;        missing_columns = [col for col in required_columns if col not in df.columns]&#10;        if missing_columns:&#10;            print(f&quot;Missing required columns: {missing_columns}&quot;)&#10;            return False&#10;        return True&#10;&#10;    @staticmethod&#10;    def validate_simulation_parameters(params: Dict[str, Any]) -&gt; Tuple[bool, List[str]]:&#10;        &quot;&quot;&quot;Validate simulation parameters and return validation status and error messages.&quot;&quot;&quot;&#10;        errors = []&#10;        &#10;        # Validate time parameters&#10;        if 'max_simulation_time' in params:&#10;            if not ValidationUtils.validate_positive_number(params['max_simulation_time'], &quot;Maximum simulation time&quot;):&#10;                errors.append(&quot;Invalid maximum simulation time&quot;)&#10;        &#10;        if 'time_step_size' in params:&#10;            if not ValidationUtils.validate_positive_number(params['time_step_size'], &quot;Time step size&quot;):&#10;                errors.append(&quot;Invalid time step size&quot;)&#10;        &#10;        # Validate coordinates&#10;        if 'launch_latitude' in params and 'launch_longitude' in params:&#10;            if not ValidationUtils.validate_coordinates(params['launch_latitude'], params['launch_longitude']):&#10;                errors.append(&quot;Invalid launch coordinates&quot;)&#10;        &#10;        # Validate rocket dimensions&#10;        if 'rocket_body_radius' in params:&#10;            if not ValidationUtils.validate_positive_number(params['rocket_body_radius'], &quot;Rocket body radius&quot;):&#10;                errors.append(&quot;Invalid rocket body radius&quot;)&#10;        &#10;        if 'rocket_body_length' in params:&#10;            if not ValidationUtils.validate_positive_number(params['rocket_body_length'], &quot;Rocket body length&quot;):&#10;                errors.append(&quot;Invalid rocket body length&quot;)&#10;        &#10;        return len(errors) == 0, errors&#10;&#10;&#10;class ExternalTools:&#10;    &quot;&quot;&quot;Interface to external tools and applications.&quot;&quot;&quot;&#10;&#10;    @staticmethod&#10;    def open_file_explorer(path: Union[str, Path]) -&gt; bool:&#10;        &quot;&quot;&quot;Open file explorer at the specified path.&quot;&quot;&quot;&#10;        try:&#10;            path_obj = Path(path)&#10;            if path_obj.exists():&#10;                if os.name == 'nt':  # Windows&#10;                    subprocess.run(['explorer', str(path_obj)], check=True)&#10;                elif os.name == 'posix':  # macOS and Linux&#10;                    subprocess.run(['open', str(path_obj)], check=True)&#10;                return True&#10;            else:&#10;                print(f&quot;Path does not exist: {path}&quot;)&#10;                return False&#10;        except Exception as e:&#10;            print(f&quot;Error opening file explorer: {e}&quot;)&#10;            return False&#10;&#10;    @staticmethod&#10;    def open_url(url: str) -&gt; bool:&#10;        &quot;&quot;&quot;Open a URL in the default web browser.&quot;&quot;&quot;&#10;        try:&#10;            webbrowser.open(url)&#10;            return True&#10;        except Exception as e:&#10;            print(f&quot;Error opening URL: {e}&quot;)&#10;            return False&#10;&#10;    @staticmethod&#10;    def run_external_command(command: List[str], working_dir: Optional[Union[str, Path]] = None) -&gt; Tuple[bool, str]:&#10;        &quot;&quot;&quot;Run an external command and return success status and output.&quot;&quot;&quot;&#10;        try:&#10;            result = subprocess.run(&#10;                command,&#10;                cwd=working_dir,&#10;                capture_output=True,&#10;                text=True,&#10;                check=True&#10;            )&#10;            return True, result.stdout&#10;        except subprocess.CalledProcessError as e:&#10;            return False, e.stderr&#10;        except Exception as e:&#10;            return False, str(e)&#10;&#10;&#10;class DataUtils:&#10;    &quot;&quot;&quot;Data processing and analysis utilities.&quot;&quot;&quot;&#10;&#10;    @staticmethod&#10;    def interpolate_data(x_data: List[float], y_data: List[float], x_new: float) -&gt; float:&#10;        &quot;&quot;&quot;Perform linear interpolation for a given x value.&quot;&quot;&quot;&#10;        try:&#10;            return np.interp(x_new, x_data, y_data)&#10;        except Exception as e:&#10;            print(f&quot;Error interpolating data: {e}&quot;)&#10;            return 0.0&#10;&#10;    @staticmethod&#10;    def smooth_data(data: List[float], window_size: int = 5) -&gt; List[float]:&#10;        &quot;&quot;&quot;Apply moving average smoothing to data.&quot;&quot;&quot;&#10;        try:&#10;            if len(data) &lt; window_size:&#10;                return data&#10;            &#10;            smoothed = []&#10;            for i in range(len(data)):&#10;                start = max(0, i - window_size // 2)&#10;                end = min(len(data), i + window_size // 2 + 1)&#10;                smoothed.append(sum(data[start:end]) / (end - start))&#10;            &#10;            return smoothed&#10;        except Exception as e:&#10;            print(f&quot;Error smoothing data: {e}&quot;)&#10;            return data&#10;&#10;    @staticmethod&#10;    def calculate_statistics(data: List[float]) -&gt; Dict[str, float]:&#10;        &quot;&quot;&quot;Calculate basic statistics for a list of numbers.&quot;&quot;&quot;&#10;        try:&#10;            if not data:&#10;                return {}&#10;            &#10;            return {&#10;                'mean': np.mean(data),&#10;                'median': np.median(data),&#10;                'std': np.std(data),&#10;                'min': np.min(data),&#10;                'max': np.max(data),&#10;                'count': len(data)&#10;            }&#10;        except Exception as e:&#10;            print(f&quot;Error calculating statistics: {e}&quot;)&#10;            return {}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/example.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/example.py" />
              <option name="originalContent" value="&#10;" />
              <option name="updatedContent" value="&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>